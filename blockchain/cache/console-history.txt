contract
)
const contract = require('../artifacts/contracts/TreasureTokenFactory.sol/TreasureTokenFactory.json'
contract
contract.abi
contract
ls
dir
const abi1 = require("./artifacts/contracts/TreasureTokenFactory.json")
const abi = require("./artifacts/contracts/TreasureTokenFactory.json")
const abi = require("artifacts/contracts/TreasureTokenFactory.json")
}
    return [fromAddresses, toAddresses, amounts]
    const amounts = decodedEvents.map(event => event["values"]["value"]);
    const fromAddresses = decodedEvents.map(event => event["values"]["from"]);
    const toAddresses = decodedEvents.map(event => event["values"]["to"]);
    });
        iface.decodeEventLog("Transfer", log.data)
    const decodedEvents = logs.map(log => {
    });
        address: contractAddress
    const logs = _provider.getLogs({
    const iface = new ethers.utils.Interface(erc20abi.abi);
const eventFilterv5 = (contractAddress, erc20abi, _provider) => {
logs1
logs
logs1
const logs1 = await ethers.provider.getLogs({topics:["0xbd24583d1f34ebaec5bacc0cb3d29df1ac91e8fc13018ebc80e3f29e3d49ce16"]})
logs
const logs = ethers.provider.getLogs({topics:["0xbd24583d1f34ebaec5bacc0cb3d29df1ac91e8fc13018ebc80e3f29e3d49ce16"]})
ethers.provider.getLogs
ethers.provider
ethers.provider()
data1.logs[0].topics
data1.logs[0]
data1.logs
data1
data2.logs
const data1 = await map.wait()
const data = await map.wait()
data.logs
wait.logs
data
const data = map.wait()
map
const map = await box.mapUser("2", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
const map = await box.mapUser("1", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
await box.mapUser("1", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
box
await box.owner()
box.owner()
await box.deployed()
const box = contract.attach("0x198c46853A9050A236bD0990bCeb99FD72D69F39")
contract.attach("0x198c46853A9050A236bD0990bCeb99FD72D69F39")
const contract = await ethers.getContractFactory("TreasureTokenFactory")
treasure.deployed()
const treasure = contract.attach("0x198c46853A9050A236bD0990bCeb99FD72D69F39")
contract.attach("0x198c46853A9050A236bD0990bCeb99FD72D69F39")
await actual.deployed()
await actual.owner()
actual.owner()
actual
const actual = contract.attach("0x2bC4bda66711B1CEC35AC6492eC2d8d90A17D6e5")
const contract = await ethers.getContractFactory("TreasureTokenFactory")
owner()
actual
box
ethers.provider.getLogs()
ethers.provider.getBalance
ethers.provider
eth_getLogs()
provider3
provider3.eth_getLogs()
provider3.getLogs()
provider3
const provider3 = network.provider
network.provider
const provider2 = new ethers.provider.JsonRpcProvider(url)
const provider = new ethers.provider.JsonRpcProvider(url)
url
const url = "http://localhost:8545";
provider
const provider1 = ethers.provider
const provider = ethers.provider
provider
const provider = ethers.provider.Provider
actual
provider
t.logs
t
const t = await hello.wait()
hello
hello.logs
const hello = await actual.mapUser("2", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
const hello = await actual.mapUser("2", "0x1")
await actual.mapUser("1", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
await actual.mapUser("1", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c", (err, result) => {console.log(err, result)})
await actual.mapUser("1", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
await actual.getUser("1")
address(t.data)
t.data
t.events
t
await t.wait()
t.wait()
const t = await actual.getUser("1")
await actual.getUser("1")
actual.getUser("1")
const actual = await Box.attach("0x998abeb3E57409262aE5b751f60747921B33613E")
const Box = await ethers.getContractFactory("TreasureTokenFactory")
await actual.mapUser("0x1", "0x6448Eb33AF3AB4FB556168495dBA8F1BeeF7EC8c")
await actual.owner()
actual.owner()
const actual = await contract.attach("0xf5059a5D33d5853360D16C683c16e67980206f36")
const contract = await ethers.getContractFactory("TreasureTokenFactory")
const actual = await contract.attach("0x689af8efa8c651a91ad287602527f3af2fe9f6501a7ac4b061667b5a93e037fd")
const contract = await ethers.getContractFactory("TreasureTokenFactory")
config